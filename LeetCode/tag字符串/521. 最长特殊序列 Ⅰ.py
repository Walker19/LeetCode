# 最长特殊序列：该序列为某字符串独有的最长子序列。
"""
- 注意题目中的独有两个字，
- s1 = 'ab',s2 = 'a',因为ab是s1独有，所以最长子序列为ab，
- s1 = 'ab', s2 = 'ab', 因为ab是两个串都有，ab排除，a也是两个串都有，排除，b也是两个串都有，排除。所以最长特殊序列不存在，返回-1
- s1 = 'ab', s2 = 'ac', 这个时候两者长度一样，但是不相等，结果也应该return'最大长度'
- 通过以上分析，我们可以得出结论，如果：两个串相等（不仅长度相等，内容也相等），那么他们的最长特殊序列不存在。返回-1
- 如果两个串长度不一样，那么长的串   永远也不可能是   短串的子序列，即len(s1) > len(s2),则最长特殊序列为s1,返回长度大的数
"""


class Solution:
    def findLUSlength(self, a, b):
        if a == b:
            return -1
        else:
            return max(len(a), len(b))


s = Solution()
print(s.findLUSlength('aba', 'cdc'))


"""
暴力解法的思想也值得一提：
暴力解法中，生成两个字符串所有的子序列共 2^n个，将其存储在 hashmap 中，并记录每个子序列出现的次数。
然后找出出现次数为 1 的最长子序列。如果不存在这样的子序列，返回 -1。

"""
